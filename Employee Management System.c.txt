#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define Employee struct emp

void add(FILE * fp); // to add to list
FILE * del(FILE * fp); // to delete from list
void modify(FILE * fp); // to modify a record
void displayList(FILE * fp); // display whole list
void searchRecord(FILE *fp); // find a particular record
void maleemp(FILE * fp); // list male employees
void femaleemp(FILE * fp); // list female employees
void printHead();
void welcome();

struct emp {
    int id;
    char name[100];
    char role[10];
    float sal;
    char gender[10];
    char phone[15];
    char mail[20];
};

int main() {
    FILE *fp;
    Employee e;
    int option;

    if ((fp = fopen("employeeInfo.txt", "rb+")) == NULL) {
        if ((fp = fopen("employeeInfo.txt", "wb+")) == NULL) {
            printf("Can't open file");
            return 0;
        }
    }

    char username[10], password[10];
    printHead();
    welcome();
    printHead();
    printf("\n\t\t\t\t  Login Screen");
    printf("\n\t\t\t      Enter Your Credentials");
    printf("\n\n\n\t\tUsername: ");
    scanf("%s", username);
    printf("\n\t\tPassword: ");
    scanf("%s", password);

    if ((strcasecmp(username, "admin") == 0) && (strcasecmp(password, "pass") == 0)) {
        while (1) {
            printHead();
            printf("\n\t\t\t\tMain Menu");
            printf("\n\n\t\t\t1. Add Employee");
            printf("\n\t\t\t2. Delete Employee");
            printf("\n\t\t\t3. Modify Employee");
            printf("\n\t\t\t4. Display Employee List");
            printf("\n\t\t\t5. Search Record");
            printf("\n\t\t\t6. List of Male Employees");
            printf("\n\t\t\t7. List of Female Employees");
            printf("\n\t\t\t0. EXIT");

            printf("\n\n\t\tEnter Your Option: ");
            scanf("%d", &option);
            switch (option) {
                case 0:
                    fclose(fp);
                    return 1;
                case 1:
                    add(fp);
                    break;
                case 2:
                    fp = del(fp);
                    break;
                case 3:
                    modify(fp);
                    break;
                case 4:
                    displayList(fp);
                    break;
                case 5:
                    searchRecord(fp);
                    break;
                case 6:
                    maleemp(fp);
                    break;
                case 7:
                    femaleemp(fp);
                    break;
                default:
                    printf("\n\t\tInvalid option");
                    break;
            }
        }
    } else {
        printf("\n\t\tLogin Failed");
    }

    return 1;
}

// Welcome Screen
void welcome() {
    printf("\n\n\n\t\tWELCOME TO OUR EMPLOYEE MANAGEMENT SYSTEM\n\n");
    system("pause");
}

// Print Header
void printHead() {
    system("cls");
    printf("\t============================================================\n");
    printf("\t================== EMPLOYEE MANAGEMENT SYSTEM ==============\n");
    printf("\t============================================================\n");
}

// Add Employee
void add(FILE * fp) {
    printHead();
    printf("\n\t\t\tAdd Employee");
    Employee e;
    char another = 'y';

    fseek(fp, 0, SEEK_END);
    while (another == 'y' || another == 'Y') {
        printf("\n\n\t\tEnter ID number: ");
        scanf("%d", &e.id);

        printf("\n\t\tEnter Full Name of Employee: ");
        fflush(stdin);
        fgets(e.name, 100, stdin);
        e.name[strlen(e.name) - 1] = '\0';

        printf("\n\t\tEnter Role: ");
        fgets(e.role, 10, stdin);
        e.role[strlen(e.role) - 1] = '\0';

        printf("\n\t\tEnter Gender: ");
        fgets(e.gender, 10, stdin);
        e.gender[strlen(e.gender) - 1] = '\0';

        printf("\n\t\tEnter Salary: ");
        scanf("%f", &e.sal);

        printf("\n\t\tEnter Phone: ");
        fflush(stdin);
        fgets(e.phone, 15, stdin);
        e.phone[strlen(e.phone) - 1] = '\0';

        printf("\n\t\tEnter E-mail: ");
        fgets(e.mail, 20, stdin);
        e.mail[strlen(e.mail) - 1] = '\0';

        fwrite(&e, sizeof(e), 1, fp);

        printf("\n\n\t\tWant to enter another employee info (Y/N)? ");
        fflush(stdin);
        another = getchar();
    }
}

// Delete Employee
FILE * del(FILE * fp) {
    printHead();
    printf("\n\t\t\tDelete Employee");
    Employee e;
    int tempid, flag = 0;
    FILE *ft;
    if ((ft = fopen("temp.txt", "wb+")) == NULL) {
        printf("\n\t\tERROR\n");
        return fp;
    }

    printf("\n\n\tEnter ID number of Employee to delete: ");
    scanf("%d", &tempid);

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        if (e.id == tempid) {
            flag = 1;
            printf("\n\tRecord Deleted for: %s", e.name);
            continue;
        }
        fwrite(&e, sizeof(e), 1, ft);
    }

    fclose(fp);
    fclose(ft);

    remove("employeeInfo.txt");
    rename("temp.txt", "employeeInfo.txt");

    if ((fp = fopen("employeeInfo.txt", "rb+")) == NULL) {
        printf("\n\tERROR");
        return NULL;
    }

    if (flag == 0) {
        printf("\n\tRecord Not Found");
    }

    return fp;
}

// Modify Employee
void modify(FILE * fp) {
    printHead();
    printf("\n\t\t\tModify Employee");
    Employee e;
    int tempid, flag = 0;

    printf("\n\n\tEnter ID number of Employee to modify: ");
    scanf("%d", &tempid);

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        if (e.id == tempid) {
            flag = 1;
            break;
        }
    }

    if (flag == 1) {
        fseek(fp, -sizeof(e), SEEK_CUR);

        printf("\n\t\tEnter New Data:");
        printf("\n\n\t\tEnter ID number: ");
        scanf("%d", &e.id);

        printf("\n\t\tEnter Full Name: ");
        fflush(stdin);
        fgets(e.name, 100, stdin);
        e.name[strlen(e.name) - 1] = '\0';

        printf("\n\t\tEnter Role: ");
        fgets(e.role, 10, stdin);
        e.role[strlen(e.role) - 1] = '\0';

        printf("\n\t\tEnter Gender: ");
        fgets(e.gender, 10, stdin);
        e.gender[strlen(e.gender) - 1] = '\0';

        printf("\n\t\tEnter Salary: ");
        scanf("%f", &e.sal);

        printf("\n\t\tEnter Phone: ");
        fflush(stdin);
        fgets(e.phone, 15, stdin);
        e.phone[strlen(e.phone) - 1] = '\0';

        printf("\n\t\tEnter E-mail: ");
        fgets(e.mail, 20, stdin);
        e.mail[strlen(e.mail) - 1] = '\0';

        fwrite(&e, sizeof(e), 1, fp);
    } else {
        printf("\n\tRecord Not Found");
    }
}

// Display Employee List
void displayList(FILE * fp) {
    printHead();
    printf("\n\t\t\tEmployee List");
    Employee e;

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        printf("\n\n\tID: %d", e.id);
        printf("\n\tName: %s", e.name);
        printf("\n\tRole: %s", e.role);
        printf("\n\tGender: %s", e.gender);
        printf("\n\tPhone: %s", e.phone);
        printf("\n\tE-mail: %s", e.mail);
        printf("\n\t=============================================");
    }

    printf("\n\n\t");
    system("pause");
}

// Search Employee Record
void searchRecord(FILE *fp) {
    printHead();
    printf("\n\t\t\tSearch Employee");
    Employee e;
    int tempid, flag = 0;

    printf("\n\n\tEnter ID number of Employee: ");
    scanf("%d", &tempid);

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        if (e.id == tempid) {
            flag = 1;
            printf("\n\n\tID: %d", e.id);
            printf("\n\tName: %s", e.name);
            printf("\n\tRole: %s", e.role);
            printf("\n\tGender: %s", e.gender);
            printf("\n\tPhone: %s", e.phone);
            printf("\n\tE-mail: %s", e.mail);
            break;
        }
    }

    if (flag == 0) {
        printf("\n\tEmployee Not Found");
    }

    printf("\n\n\t");
    system("pause");
}

// List Male Employees
void maleemp(FILE *fp) {
    printHead();
    printf("\n\t\t\tMale Employee List");
    Employee e;

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        if (strcasecmp(e.gender, "male") == 0) {
            printf("\n\n\tID: %d", e.id);
            printf("\n\tName: %s", e.name);
            printf("\n\tRole: %s", e.role);
            printf("\n\tPhone: %s", e.phone);
            printf("\n\tE-mail: %s", e.mail);
            printf("\n\t=============================================");
        }
    }

    printf("\n\n\t");
    system("pause");
}

// List Female Employees
void femaleemp(FILE *fp) {
    printHead();
    printf("\n\t\t\tFemale Employee List");
    Employee e;

    rewind(fp);
    while (fread(&e, sizeof(e), 1, fp) == 1) {
        if (strcasecmp(e.gender, "female") == 0) {
            printf("\n\n\tID: %d", e.id);
            printf("\n\tName: %s", e.name);
            printf("\n\tRole: %s", e.role);
            printf("\n\tPhone: %s", e.phone);
            printf("\n\tE-mail: %s", e.mail);
            printf("\n\t=============================================");
        }
    }

    printf("\n\n\t");
    system("pause");
}
